/*
 * generated by Xtext 2.9.2
 */
package org.lilychant.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.lilychant.ide.contentassist.antlr.internal.InternalLilyChantParser;
import org.lilychant.services.LilyChantGrammarAccess;

public class LilyChantParser extends AbstractContentAssistParser {

	@Inject
	private LilyChantGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalLilyChantParser createParser() {
		InternalLilyChantParser result = new InternalLilyChantParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new LilyChantTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNoteGroupAccess().getAlternatives(), "rule__NoteGroup__Alternatives");
					put(grammarAccess.getNoteGroupAccess().getAlternatives_0_0(), "rule__NoteGroup__Alternatives_0_0");
					put(grammarAccess.getNoteGroupAccess().getSyllablesAlternatives_1_1_0(), "rule__NoteGroup__SyllablesAlternatives_1_1_0");
					put(grammarAccess.getScriptAccess().getGroup(), "rule__Script__Group__0");
					put(grammarAccess.getToneAccess().getGroup(), "rule__Tone__Group__0");
					put(grammarAccess.getTonePhraseAccess().getGroup(), "rule__TonePhrase__Group__0");
					put(grammarAccess.getVoicePhraseAccess().getGroup(), "rule__VoicePhrase__Group__0");
					put(grammarAccess.getChantAccess().getGroup(), "rule__Chant__Group__0");
					put(grammarAccess.getLyricPhraseAccess().getGroup(), "rule__LyricPhrase__Group__0");
					put(grammarAccess.getNoteGroupAccess().getGroup_0(), "rule__NoteGroup__Group_0__0");
					put(grammarAccess.getNoteGroupAccess().getGroup_0_0_0(), "rule__NoteGroup__Group_0_0_0__0");
					put(grammarAccess.getNoteGroupAccess().getGroup_0_0_0_1(), "rule__NoteGroup__Group_0_0_0_1__0");
					put(grammarAccess.getNoteGroupAccess().getGroup_0_0_1(), "rule__NoteGroup__Group_0_0_1__0");
					put(grammarAccess.getNoteGroupAccess().getGroup_1(), "rule__NoteGroup__Group_1__0");
					put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
					put(grammarAccess.getScriptAccess().getTonesAssignment_0(), "rule__Script__TonesAssignment_0");
					put(grammarAccess.getScriptAccess().getChantsAssignment_1(), "rule__Script__ChantsAssignment_1");
					put(grammarAccess.getToneAccess().getNameAssignment_1(), "rule__Tone__NameAssignment_1");
					put(grammarAccess.getToneAccess().getKeyAssignment_3(), "rule__Tone__KeyAssignment_3");
					put(grammarAccess.getToneAccess().getVoiceNamesAssignment_7(), "rule__Tone__VoiceNamesAssignment_7");
					put(grammarAccess.getToneAccess().getPhrasesAssignment_9(), "rule__Tone__PhrasesAssignment_9");
					put(grammarAccess.getVoiceNameAccess().getNameAssignment(), "rule__VoiceName__NameAssignment");
					put(grammarAccess.getTonePhraseAccess().getNameAssignment_1(), "rule__TonePhrase__NameAssignment_1");
					put(grammarAccess.getTonePhraseAccess().getVoicesAssignment_3(), "rule__TonePhrase__VoicesAssignment_3");
					put(grammarAccess.getVoicePhraseAccess().getNameAssignment_1(), "rule__VoicePhrase__NameAssignment_1");
					put(grammarAccess.getVoicePhraseAccess().getNotesAssignment_3(), "rule__VoicePhrase__NotesAssignment_3");
					put(grammarAccess.getChantAccess().getNameAssignment_1(), "rule__Chant__NameAssignment_1");
					put(grammarAccess.getChantAccess().getToneAssignment_3(), "rule__Chant__ToneAssignment_3");
					put(grammarAccess.getChantAccess().getKeyAssignment_5(), "rule__Chant__KeyAssignment_5");
					put(grammarAccess.getChantAccess().getPhrasesAssignment_7(), "rule__Chant__PhrasesAssignment_7");
					put(grammarAccess.getLyricPhraseAccess().getNotesAssignment_1(), "rule__LyricPhrase__NotesAssignment_1");
					put(grammarAccess.getLyricPhraseAccess().getNoteGroupsAssignment_3(), "rule__LyricPhrase__NoteGroupsAssignment_3");
					put(grammarAccess.getLyricPhraseAccess().getDoubleBarAssignment_4(), "rule__LyricPhrase__DoubleBarAssignment_4");
					put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_0_0_0(), "rule__NoteGroup__SyllablesAssignment_0_0_0_0");
					put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_0_0_1_0(), "rule__NoteGroup__SyllablesAssignment_0_0_0_1_0");
					put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_0_1_0(), "rule__NoteGroup__SyllablesAssignment_0_0_1_0");
					put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_0_1_1(), "rule__NoteGroup__SyllablesAssignment_0_0_1_1");
					put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_1(), "rule__NoteGroup__SyllablesAssignment_0_1");
					put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_1_1(), "rule__NoteGroup__SyllablesAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalLilyChantParser typedParser = (InternalLilyChantParser) parser;
			typedParser.entryRuleScript();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LilyChantGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LilyChantGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
