/*
 * generated by Xtext 2.40.0
 */
package org.lilychant.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.lilychant.ide.contentassist.antlr.internal.InternalLilyChantParser;
import org.lilychant.services.LilyChantGrammarAccess;

public class LilyChantParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LilyChantGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LilyChantGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getNoteGroupAccess().getAlternatives(), "rule__NoteGroup__Alternatives");
			builder.put(grammarAccess.getNoteGroupAccess().getAlternatives_0_0(), "rule__NoteGroup__Alternatives_0_0");
			builder.put(grammarAccess.getNoteGroupAccess().getSyllablesAlternatives_2_2_0(), "rule__NoteGroup__SyllablesAlternatives_2_2_0");
			builder.put(grammarAccess.getBarlineAccess().getAlternatives(), "rule__Barline__Alternatives");
			builder.put(grammarAccess.getScriptAccess().getGroup(), "rule__Script__Group__0");
			builder.put(grammarAccess.getToneAccess().getGroup(), "rule__Tone__Group__0");
			builder.put(grammarAccess.getTonePhraseAccess().getGroup(), "rule__TonePhrase__Group__0");
			builder.put(grammarAccess.getVoicePhraseAccess().getGroup(), "rule__VoicePhrase__Group__0");
			builder.put(grammarAccess.getChantAccess().getGroup(), "rule__Chant__Group__0");
			builder.put(grammarAccess.getLyricPhraseAccess().getGroup(), "rule__LyricPhrase__Group__0");
			builder.put(grammarAccess.getLyricPhraseAccess().getGroup_0(), "rule__LyricPhrase__Group_0__0");
			builder.put(grammarAccess.getNoteGroupAccess().getGroup_0(), "rule__NoteGroup__Group_0__0");
			builder.put(grammarAccess.getNoteGroupAccess().getGroup_0_0_0(), "rule__NoteGroup__Group_0_0_0__0");
			builder.put(grammarAccess.getNoteGroupAccess().getGroup_0_0_0_1(), "rule__NoteGroup__Group_0_0_0_1__0");
			builder.put(grammarAccess.getNoteGroupAccess().getGroup_0_0_1(), "rule__NoteGroup__Group_0_0_1__0");
			builder.put(grammarAccess.getNoteGroupAccess().getGroup_2(), "rule__NoteGroup__Group_2__0");
			builder.put(grammarAccess.getIdRuleAccess().getGroup(), "rule__IdRule__Group__0");
			builder.put(grammarAccess.getHyphenRuleAccess().getGroup(), "rule__HyphenRule__Group__0");
			builder.put(grammarAccess.getExtenderRuleAccess().getGroup(), "rule__ExtenderRule__Group__0");
			builder.put(grammarAccess.getSkipRuleAccess().getGroup(), "rule__SkipRule__Group__0");
			builder.put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
			builder.put(grammarAccess.getFormatAccess().getGroup(), "rule__Format__Group__0");
			builder.put(grammarAccess.getScriptAccess().getTonesAssignment_0(), "rule__Script__TonesAssignment_0");
			builder.put(grammarAccess.getScriptAccess().getChantsAssignment_1(), "rule__Script__ChantsAssignment_1");
			builder.put(grammarAccess.getScriptAccess().getFormatAssignment_2(), "rule__Script__FormatAssignment_2");
			builder.put(grammarAccess.getToneAccess().getNameAssignment_1(), "rule__Tone__NameAssignment_1");
			builder.put(grammarAccess.getToneAccess().getVoiceNamesAssignment_5(), "rule__Tone__VoiceNamesAssignment_5");
			builder.put(grammarAccess.getToneAccess().getPhrasesAssignment_7(), "rule__Tone__PhrasesAssignment_7");
			builder.put(grammarAccess.getVoiceNameAccess().getNameAssignment(), "rule__VoiceName__NameAssignment");
			builder.put(grammarAccess.getTonePhraseAccess().getNameAssignment_1(), "rule__TonePhrase__NameAssignment_1");
			builder.put(grammarAccess.getTonePhraseAccess().getVoicesAssignment_3(), "rule__TonePhrase__VoicesAssignment_3");
			builder.put(grammarAccess.getVoicePhraseAccess().getNameAssignment_1(), "rule__VoicePhrase__NameAssignment_1");
			builder.put(grammarAccess.getVoicePhraseAccess().getNotesAssignment_3(), "rule__VoicePhrase__NotesAssignment_3");
			builder.put(grammarAccess.getChantAccess().getNameAssignment_1(), "rule__Chant__NameAssignment_1");
			builder.put(grammarAccess.getChantAccess().getToneAssignment_3(), "rule__Chant__ToneAssignment_3");
			builder.put(grammarAccess.getChantAccess().getPhrasesAssignment_5(), "rule__Chant__PhrasesAssignment_5");
			builder.put(grammarAccess.getLyricPhraseAccess().getExplicitPhraseAssignment_0_1(), "rule__LyricPhrase__ExplicitPhraseAssignment_0_1");
			builder.put(grammarAccess.getLyricPhraseAccess().getNoteGroupsAssignment_1(), "rule__LyricPhrase__NoteGroupsAssignment_1");
			builder.put(grammarAccess.getLyricPhraseAccess().getBarAssignment_2(), "rule__LyricPhrase__BarAssignment_2");
			builder.put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_0_0_0(), "rule__NoteGroup__SyllablesAssignment_0_0_0_0");
			builder.put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_0_0_1_0(), "rule__NoteGroup__SyllablesAssignment_0_0_0_1_0");
			builder.put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_0_1_0(), "rule__NoteGroup__SyllablesAssignment_0_0_1_0");
			builder.put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_0_1_1(), "rule__NoteGroup__SyllablesAssignment_0_0_1_1");
			builder.put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_0_1(), "rule__NoteGroup__SyllablesAssignment_0_1");
			builder.put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_1(), "rule__NoteGroup__SyllablesAssignment_1");
			builder.put(grammarAccess.getNoteGroupAccess().getNoemphasisAssignment_2_1(), "rule__NoteGroup__NoemphasisAssignment_2_1");
			builder.put(grammarAccess.getNoteGroupAccess().getSyllablesAssignment_2_2(), "rule__NoteGroup__SyllablesAssignment_2_2");
			builder.put(grammarAccess.getIdRuleAccess().getEmphasisAssignment_0(), "rule__IdRule__EmphasisAssignment_0");
			builder.put(grammarAccess.getIdRuleAccess().getLiteralAssignment_1(), "rule__IdRule__LiteralAssignment_1");
			builder.put(grammarAccess.getHyphenRuleAccess().getLiteralAssignment_1(), "rule__HyphenRule__LiteralAssignment_1");
			builder.put(grammarAccess.getExtenderRuleAccess().getLiteralAssignment_1(), "rule__ExtenderRule__LiteralAssignment_1");
			builder.put(grammarAccess.getSkipRuleAccess().getLiteralAssignment_1(), "rule__SkipRule__LiteralAssignment_1");
			builder.put(grammarAccess.getNoteAccess().getPitchAssignment_0(), "rule__Note__PitchAssignment_0");
			builder.put(grammarAccess.getNoteAccess().getDurationAssignment_1(), "rule__Note__DurationAssignment_1");
			builder.put(grammarAccess.getFormatAccess().getRaggedbottomAssignment_2_0(), "rule__Format__RaggedbottomAssignment_2_0");
			builder.put(grammarAccess.getFormatAccess().getRaggedlastbottomAssignment_2_1(), "rule__Format__RaggedlastbottomAssignment_2_1");
			builder.put(grammarAccess.getFormatAccess().getUnorderedGroup_2(), "rule__Format__UnorderedGroup_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LilyChantGrammarAccess grammarAccess;

	@Override
	protected InternalLilyChantParser createParser() {
		InternalLilyChantParser result = new InternalLilyChantParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new LilyChantTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LilyChantGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LilyChantGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
