/**
 * generated by Xtext 2.9.2
 */
package org.lilychant.lilyChantScript.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.lilychant.lilyChantScript.Chant;
import org.lilychant.lilyChantScript.LilyChantScriptPackage;
import org.lilychant.lilyChantScript.LyricPhrase;
import org.lilychant.lilyChantScript.Tone;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Chant</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.lilychant.lilyChantScript.impl.ChantImpl#getTone <em>Tone</em>}</li>
 *   <li>{@link org.lilychant.lilyChantScript.impl.ChantImpl#getKey <em>Key</em>}</li>
 *   <li>{@link org.lilychant.lilyChantScript.impl.ChantImpl#getPhrases <em>Phrases</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ChantImpl extends MinimalEObjectImpl.Container implements Chant
{
  /**
   * The cached value of the '{@link #getTone() <em>Tone</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTone()
   * @generated
   * @ordered
   */
  protected Tone tone;

  /**
   * The default value of the '{@link #getKey() <em>Key</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKey()
   * @generated
   * @ordered
   */
  protected static final String KEY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getKey() <em>Key</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKey()
   * @generated
   * @ordered
   */
  protected String key = KEY_EDEFAULT;

  /**
   * The cached value of the '{@link #getPhrases() <em>Phrases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhrases()
   * @generated
   * @ordered
   */
  protected EList<LyricPhrase> phrases;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChantImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LilyChantScriptPackage.Literals.CHANT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tone getTone()
  {
    if (tone != null && tone.eIsProxy())
    {
      InternalEObject oldTone = (InternalEObject)tone;
      tone = (Tone)eResolveProxy(oldTone);
      if (tone != oldTone)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LilyChantScriptPackage.CHANT__TONE, oldTone, tone));
      }
    }
    return tone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tone basicGetTone()
  {
    return tone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTone(Tone newTone)
  {
    Tone oldTone = tone;
    tone = newTone;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LilyChantScriptPackage.CHANT__TONE, oldTone, tone));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getKey()
  {
    return key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setKey(String newKey)
  {
    String oldKey = key;
    key = newKey;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LilyChantScriptPackage.CHANT__KEY, oldKey, key));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<LyricPhrase> getPhrases()
  {
    if (phrases == null)
    {
      phrases = new EObjectContainmentEList<LyricPhrase>(LyricPhrase.class, this, LilyChantScriptPackage.CHANT__PHRASES);
    }
    return phrases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.CHANT__PHRASES:
        return ((InternalEList<?>)getPhrases()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.CHANT__TONE:
        if (resolve) return getTone();
        return basicGetTone();
      case LilyChantScriptPackage.CHANT__KEY:
        return getKey();
      case LilyChantScriptPackage.CHANT__PHRASES:
        return getPhrases();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.CHANT__TONE:
        setTone((Tone)newValue);
        return;
      case LilyChantScriptPackage.CHANT__KEY:
        setKey((String)newValue);
        return;
      case LilyChantScriptPackage.CHANT__PHRASES:
        getPhrases().clear();
        getPhrases().addAll((Collection<? extends LyricPhrase>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.CHANT__TONE:
        setTone((Tone)null);
        return;
      case LilyChantScriptPackage.CHANT__KEY:
        setKey(KEY_EDEFAULT);
        return;
      case LilyChantScriptPackage.CHANT__PHRASES:
        getPhrases().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.CHANT__TONE:
        return tone != null;
      case LilyChantScriptPackage.CHANT__KEY:
        return KEY_EDEFAULT == null ? key != null : !KEY_EDEFAULT.equals(key);
      case LilyChantScriptPackage.CHANT__PHRASES:
        return phrases != null && !phrases.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (key: ");
    result.append(key);
    result.append(')');
    return result.toString();
  }

} //ChantImpl
