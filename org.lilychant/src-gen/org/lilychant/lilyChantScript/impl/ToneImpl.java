/**
 * generated by Xtext 2.11.0
 */
package org.lilychant.lilyChantScript.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.lilychant.lilyChantScript.LilyChantScriptPackage;
import org.lilychant.lilyChantScript.Tone;
import org.lilychant.lilyChantScript.TonePhrase;
import org.lilychant.lilyChantScript.VoiceName;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tone</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.lilychant.lilyChantScript.impl.ToneImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.lilychant.lilyChantScript.impl.ToneImpl#getVoiceNames <em>Voice Names</em>}</li>
 *   <li>{@link org.lilychant.lilyChantScript.impl.ToneImpl#getPhrases <em>Phrases</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ToneImpl extends MinimalEObjectImpl.Container implements Tone
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVoiceNames() <em>Voice Names</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVoiceNames()
   * @generated
   * @ordered
   */
  protected EList<VoiceName> voiceNames;

  /**
   * The cached value of the '{@link #getPhrases() <em>Phrases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhrases()
   * @generated
   * @ordered
   */
  protected EList<TonePhrase> phrases;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ToneImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LilyChantScriptPackage.Literals.TONE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LilyChantScriptPackage.TONE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<VoiceName> getVoiceNames()
  {
    if (voiceNames == null)
    {
      voiceNames = new EObjectContainmentEList<VoiceName>(VoiceName.class, this, LilyChantScriptPackage.TONE__VOICE_NAMES);
    }
    return voiceNames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TonePhrase> getPhrases()
  {
    if (phrases == null)
    {
      phrases = new EObjectContainmentEList<TonePhrase>(TonePhrase.class, this, LilyChantScriptPackage.TONE__PHRASES);
    }
    return phrases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.TONE__VOICE_NAMES:
        return ((InternalEList<?>)getVoiceNames()).basicRemove(otherEnd, msgs);
      case LilyChantScriptPackage.TONE__PHRASES:
        return ((InternalEList<?>)getPhrases()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.TONE__NAME:
        return getName();
      case LilyChantScriptPackage.TONE__VOICE_NAMES:
        return getVoiceNames();
      case LilyChantScriptPackage.TONE__PHRASES:
        return getPhrases();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.TONE__NAME:
        setName((String)newValue);
        return;
      case LilyChantScriptPackage.TONE__VOICE_NAMES:
        getVoiceNames().clear();
        getVoiceNames().addAll((Collection<? extends VoiceName>)newValue);
        return;
      case LilyChantScriptPackage.TONE__PHRASES:
        getPhrases().clear();
        getPhrases().addAll((Collection<? extends TonePhrase>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.TONE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LilyChantScriptPackage.TONE__VOICE_NAMES:
        getVoiceNames().clear();
        return;
      case LilyChantScriptPackage.TONE__PHRASES:
        getPhrases().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LilyChantScriptPackage.TONE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LilyChantScriptPackage.TONE__VOICE_NAMES:
        return voiceNames != null && !voiceNames.isEmpty();
      case LilyChantScriptPackage.TONE__PHRASES:
        return phrases != null && !phrases.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ToneImpl
