/**
 * generated by Xtext 2.11.0
 */
package org.lilychant.lilyChantScript.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.lilychant.lilyChantScript.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LilyChantScriptFactoryImpl extends EFactoryImpl implements LilyChantScriptFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LilyChantScriptFactory init()
  {
    try
    {
      LilyChantScriptFactory theLilyChantScriptFactory = (LilyChantScriptFactory)EPackage.Registry.INSTANCE.getEFactory(LilyChantScriptPackage.eNS_URI);
      if (theLilyChantScriptFactory != null)
      {
        return theLilyChantScriptFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LilyChantScriptFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LilyChantScriptFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LilyChantScriptPackage.SCRIPT: return createScript();
      case LilyChantScriptPackage.TONE: return createTone();
      case LilyChantScriptPackage.VOICE_NAME: return createVoiceName();
      case LilyChantScriptPackage.TONE_PHRASE: return createTonePhrase();
      case LilyChantScriptPackage.VOICE_PHRASE: return createVoicePhrase();
      case LilyChantScriptPackage.CHANT: return createChant();
      case LilyChantScriptPackage.LYRIC_PHRASE: return createLyricPhrase();
      case LilyChantScriptPackage.NOTE_GROUP: return createNoteGroup();
      case LilyChantScriptPackage.SYLLABLE: return createSyllable();
      case LilyChantScriptPackage.NOTE: return createNote();
      case LilyChantScriptPackage.FORMAT: return createFormat();
      case LilyChantScriptPackage.HYPHEN_RULE: return createHyphenRule();
      case LilyChantScriptPackage.EXTENDER_RULE: return createExtenderRule();
      case LilyChantScriptPackage.SKIP_RULE: return createSkipRule();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LilyChantScriptPackage.BARLINE:
        return createBarlineFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LilyChantScriptPackage.BARLINE:
        return convertBarlineToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Script createScript()
  {
    ScriptImpl script = new ScriptImpl();
    return script;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tone createTone()
  {
    ToneImpl tone = new ToneImpl();
    return tone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VoiceName createVoiceName()
  {
    VoiceNameImpl voiceName = new VoiceNameImpl();
    return voiceName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TonePhrase createTonePhrase()
  {
    TonePhraseImpl tonePhrase = new TonePhraseImpl();
    return tonePhrase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VoicePhrase createVoicePhrase()
  {
    VoicePhraseImpl voicePhrase = new VoicePhraseImpl();
    return voicePhrase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Chant createChant()
  {
    ChantImpl chant = new ChantImpl();
    return chant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LyricPhrase createLyricPhrase()
  {
    LyricPhraseImpl lyricPhrase = new LyricPhraseImpl();
    return lyricPhrase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteGroup createNoteGroup()
  {
    NoteGroupImpl noteGroup = new NoteGroupImpl();
    return noteGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Syllable createSyllable()
  {
    SyllableImpl syllable = new SyllableImpl();
    return syllable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Note createNote()
  {
    NoteImpl note = new NoteImpl();
    return note;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Format createFormat()
  {
    FormatImpl format = new FormatImpl();
    return format;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HyphenRule createHyphenRule()
  {
    HyphenRuleImpl hyphenRule = new HyphenRuleImpl();
    return hyphenRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExtenderRule createExtenderRule()
  {
    ExtenderRuleImpl extenderRule = new ExtenderRuleImpl();
    return extenderRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SkipRule createSkipRule()
  {
    SkipRuleImpl skipRule = new SkipRuleImpl();
    return skipRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Barline createBarlineFromString(EDataType eDataType, String initialValue)
  {
    Barline result = Barline.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBarlineToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LilyChantScriptPackage getLilyChantScriptPackage()
  {
    return (LilyChantScriptPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LilyChantScriptPackage getPackage()
  {
    return LilyChantScriptPackage.eINSTANCE;
  }

} //LilyChantScriptFactoryImpl
