/*
 * generated by Xtext 2.40.0
 */
package org.lilychant.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LilyChantGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTonesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTonesToneParserRuleCall_0_0 = (RuleCall)cTonesAssignment_0.eContents().get(0);
		private final Assignment cChantsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChantsChantParserRuleCall_1_0 = (RuleCall)cChantsAssignment_1.eContents().get(0);
		private final Assignment cFormatAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormatFormatParserRuleCall_2_0 = (RuleCall)cFormatAssignment_2.eContents().get(0);
		
		//Script:
		//    (tones+=Tone)*
		////    ensemble=Ensemble
		//    (chants+=Chant)*
		//    format=Format?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    (tones+=Tone)*
		////    ensemble=Ensemble
		//    (chants+=Chant)*
		//    format=Format?
		public Group getGroup() { return cGroup; }
		
		//(tones+=Tone)*
		public Assignment getTonesAssignment_0() { return cTonesAssignment_0; }
		
		//Tone
		public RuleCall getTonesToneParserRuleCall_0_0() { return cTonesToneParserRuleCall_0_0; }
		
		////    ensemble=Ensemble
		//    (chants+=Chant)*
		public Assignment getChantsAssignment_1() { return cChantsAssignment_1; }
		
		//Chant
		public RuleCall getChantsChantParserRuleCall_1_0() { return cChantsChantParserRuleCall_1_0; }
		
		//format=Format?
		public Assignment getFormatAssignment_2() { return cFormatAssignment_2; }
		
		//Format
		public RuleCall getFormatFormatParserRuleCall_2_0() { return cFormatFormatParserRuleCall_2_0; }
	}
	public class ToneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.Tone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cVoicesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cVoiceNamesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVoiceNamesVoiceNameParserRuleCall_5_0 = (RuleCall)cVoiceNamesAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cPhrasesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPhrasesTonePhraseParserRuleCall_7_0 = (RuleCall)cPhrasesAssignment_7.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		///*
		// * Tone definitions
		// */
		//// TODO VOICE NAMES SHOULD BE GLOBAL
		//Tone:
		//    'Tone' name=ID //'key' key=ID
		//        BEGIN
		//        'Voices'
		//            BEGIN
		//            voiceNames+=VoiceName+
		//            END
		//        (phrases+=TonePhrase)+
		//        END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Tone' name=ID //'key' key=ID
		//    BEGIN
		//    'Voices'
		//        BEGIN
		//        voiceNames+=VoiceName+
		//        END
		//    (phrases+=TonePhrase)+
		//    END
		public Group getGroup() { return cGroup; }
		
		//'Tone'
		public Keyword getToneKeyword_0() { return cToneKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		////'key' key=ID
		//       BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//'Voices'
		public Keyword getVoicesKeyword_3() { return cVoicesKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//voiceNames+=VoiceName+
		public Assignment getVoiceNamesAssignment_5() { return cVoiceNamesAssignment_5; }
		
		//VoiceName
		public RuleCall getVoiceNamesVoiceNameParserRuleCall_5_0() { return cVoiceNamesVoiceNameParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
		
		//(phrases+=TonePhrase)+
		public Assignment getPhrasesAssignment_7() { return cPhrasesAssignment_7; }
		
		//TonePhrase
		public RuleCall getPhrasesTonePhraseParserRuleCall_7_0() { return cPhrasesTonePhraseParserRuleCall_7_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_8() { return cENDTerminalRuleCall_8; }
	}
	public class VoiceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.VoiceName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VoiceName:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TonePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.TonePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhraseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cVoicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVoicesVoicePhraseParserRuleCall_3_0 = (RuleCall)cVoicesAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//TonePhrase:
		//    'Phrase' name=ID
		//        BEGIN
		//        voices+=VoicePhrase+
		//        END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Phrase' name=ID
		//    BEGIN
		//    voices+=VoicePhrase+
		//    END
		public Group getGroup() { return cGroup; }
		
		//'Phrase'
		public Keyword getPhraseKeyword_0() { return cPhraseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//voices+=VoicePhrase+
		public Assignment getVoicesAssignment_3() { return cVoicesAssignment_3; }
		
		//VoicePhrase
		public RuleCall getVoicesVoicePhraseParserRuleCall_3_0() { return cVoicesVoicePhraseParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class VoicePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.VoicePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameVoiceNameCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameVoiceNameIDTerminalRuleCall_1_0_1 = (RuleCall)cNameVoiceNameCrossReference_1_0.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//VoicePhrase:
		//    'Voice' name=[VoiceName]
		//        BEGIN
		//        notes+=Note+
		//        END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Voice' name=[VoiceName]
		//    BEGIN
		//    notes+=Note+
		//    END
		public Group getGroup() { return cGroup; }
		
		//'Voice'
		public Keyword getVoiceKeyword_0() { return cVoiceKeyword_0; }
		
		//name=[VoiceName]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[VoiceName]
		public CrossReference getNameVoiceNameCrossReference_1_0() { return cNameVoiceNameCrossReference_1_0; }
		
		//ID
		public RuleCall getNameVoiceNameIDTerminalRuleCall_1_0_1() { return cNameVoiceNameIDTerminalRuleCall_1_0_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//notes+=Note+
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//Note
		public RuleCall getNotesNoteParserRuleCall_3_0() { return cNotesNoteParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class ChantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.Chant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cToneKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToneAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cToneToneCrossReference_3_0 = (CrossReference)cToneAssignment_3.eContents().get(0);
		private final RuleCall cToneToneIDTerminalRuleCall_3_0_1 = (RuleCall)cToneToneCrossReference_3_0.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cPhrasesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPhrasesLyricPhraseParserRuleCall_5_0 = (RuleCall)cPhrasesAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		/////*
		//// * Ensemble
		//// */
		////
		////Ensemble:
		////    'ensemble' ':'
		////    'top' 'staff' ':' BEGIN voices+=[VoiceName]+ END
		////    'bottom' 'staff' ':' BEGIN voices+=[VoiceName]+ END
		////;
		///*
		// * Chants
		// */
		//Chant:
		//    'Chant' name=STRING? 'Tone' tone=[Tone] //'key' key=ID
		//        BEGIN
		//        phrases+=LyricPhrase+
		//        END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Chant' name=STRING? 'Tone' tone=[Tone] //'key' key=ID
		//    BEGIN
		//    phrases+=LyricPhrase+
		//    END
		public Group getGroup() { return cGroup; }
		
		//'Chant'
		public Keyword getChantKeyword_0() { return cChantKeyword_0; }
		
		//name=STRING?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'Tone'
		public Keyword getToneKeyword_2() { return cToneKeyword_2; }
		
		//tone=[Tone]
		public Assignment getToneAssignment_3() { return cToneAssignment_3; }
		
		//[Tone]
		public CrossReference getToneToneCrossReference_3_0() { return cToneToneCrossReference_3_0; }
		
		//ID
		public RuleCall getToneToneIDTerminalRuleCall_3_0_1() { return cToneToneIDTerminalRuleCall_3_0_1; }
		
		////'key' key=ID
		//       BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//phrases+=LyricPhrase+
		public Assignment getPhrasesAssignment_5() { return cPhrasesAssignment_5; }
		
		//LyricPhrase
		public RuleCall getPhrasesLyricPhraseParserRuleCall_5_0() { return cPhrasesLyricPhraseParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class LyricPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.LyricPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExplicitPhraseAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cExplicitPhraseTonePhraseCrossReference_0_1_0 = (CrossReference)cExplicitPhraseAssignment_0_1.eContents().get(0);
		private final RuleCall cExplicitPhraseTonePhraseIDTerminalRuleCall_0_1_0_1 = (RuleCall)cExplicitPhraseTonePhraseCrossReference_0_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNoteGroupsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteGroupsNoteGroupParserRuleCall_1_0 = (RuleCall)cNoteGroupsAssignment_1.eContents().get(0);
		private final Assignment cBarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBarBarlineEnumRuleCall_2_0 = (RuleCall)cBarAssignment_2.eContents().get(0);
		
		//LyricPhrase:
		//    ('(' explicitPhrase=[TonePhrase] ')')?
		//    noteGroups+=NoteGroup+
		//    bar=Barline
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('(' explicitPhrase=[TonePhrase] ')')?
		//noteGroups+=NoteGroup+
		//bar=Barline
		public Group getGroup() { return cGroup; }
		
		//('(' explicitPhrase=[TonePhrase] ')')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//explicitPhrase=[TonePhrase]
		public Assignment getExplicitPhraseAssignment_0_1() { return cExplicitPhraseAssignment_0_1; }
		
		//[TonePhrase]
		public CrossReference getExplicitPhraseTonePhraseCrossReference_0_1_0() { return cExplicitPhraseTonePhraseCrossReference_0_1_0; }
		
		//ID
		public RuleCall getExplicitPhraseTonePhraseIDTerminalRuleCall_0_1_0_1() { return cExplicitPhraseTonePhraseIDTerminalRuleCall_0_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//noteGroups+=NoteGroup+
		public Assignment getNoteGroupsAssignment_1() { return cNoteGroupsAssignment_1; }
		
		//NoteGroup
		public RuleCall getNoteGroupsNoteGroupParserRuleCall_1_0() { return cNoteGroupsNoteGroupParserRuleCall_1_0; }
		
		//bar=Barline
		public Assignment getBarAssignment_2() { return cBarAssignment_2; }
		
		//Barline
		public RuleCall getBarBarlineEnumRuleCall_2_0() { return cBarBarlineEnumRuleCall_2_0; }
	}
	public class NoteGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.NoteGroup");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Assignment cSyllablesAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final RuleCall cSyllablesIdRuleParserRuleCall_0_0_0_0_0 = (RuleCall)cSyllablesAssignment_0_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_0_1 = (Group)cGroup_0_0_0.eContents().get(1);
		private final Assignment cSyllablesAssignment_0_0_0_1_0 = (Assignment)cGroup_0_0_0_1.eContents().get(0);
		private final RuleCall cSyllablesHyphenRuleParserRuleCall_0_0_0_1_0_0 = (RuleCall)cSyllablesAssignment_0_0_0_1_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Assignment cSyllablesAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cSyllablesHyphenRuleParserRuleCall_0_0_1_0_0 = (RuleCall)cSyllablesAssignment_0_0_1_0.eContents().get(0);
		private final Assignment cSyllablesAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cSyllablesIdRuleParserRuleCall_0_0_1_1_0 = (RuleCall)cSyllablesAssignment_0_0_1_1.eContents().get(0);
		private final Assignment cSyllablesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSyllablesExtenderRuleParserRuleCall_0_1_0 = (RuleCall)cSyllablesAssignment_0_1.eContents().get(0);
		private final Assignment cSyllablesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSyllablesSkipRuleParserRuleCall_1_0 = (RuleCall)cSyllablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSTART_NOTE_GROUPTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cNoemphasisAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cNoemphasisSolidusKeyword_2_1_0 = (Keyword)cNoemphasisAssignment_2_1.eContents().get(0);
		private final Assignment cSyllablesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Alternatives cSyllablesAlternatives_2_2_0 = (Alternatives)cSyllablesAssignment_2_2.eContents().get(0);
		private final RuleCall cSyllablesIdRuleParserRuleCall_2_2_0_0 = (RuleCall)cSyllablesAlternatives_2_2_0.eContents().get(0);
		private final RuleCall cSyllablesHyphenRuleParserRuleCall_2_2_0_1 = (RuleCall)cSyllablesAlternatives_2_2_0.eContents().get(1);
		private final RuleCall cSyllablesExtenderRuleParserRuleCall_2_2_0_2 = (RuleCall)cSyllablesAlternatives_2_2_0.eContents().get(2);
		private final RuleCall cEND_NOTE_GROUPTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//NoteGroup:
		//    // single syllable
		//    (
		//        (
		//            syllables+=IdRule =>(syllables+=HyphenRule)?
		//            | syllables+=HyphenRule syllables+=IdRule
		//        )
		//        syllables+=ExtenderRule*
		//    )
		//    | syllables+=SkipRule
		//    // group of syllables to be repeated on the same pitch
		//    | START_NOTE_GROUP noemphasis?='/'? syllables+=(IdRule|HyphenRule|ExtenderRule)+ END_NOTE_GROUP
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// single syllable
		//(
		//    (
		//        syllables+=IdRule =>(syllables+=HyphenRule)?
		//        | syllables+=HyphenRule syllables+=IdRule
		//    )
		//    syllables+=ExtenderRule*
		//)
		//| syllables+=SkipRule
		//// group of syllables to be repeated on the same pitch
		//| START_NOTE_GROUP noemphasis?='/'? syllables+=(IdRule|HyphenRule|ExtenderRule)+ END_NOTE_GROUP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// single syllable
		//(
		//    (
		//        syllables+=IdRule =>(syllables+=HyphenRule)?
		//        | syllables+=HyphenRule syllables+=IdRule
		//    )
		//    syllables+=ExtenderRule*
		//)
		public Group getGroup_0() { return cGroup_0; }
		
		//(
		//    syllables+=IdRule =>(syllables+=HyphenRule)?
		//    | syllables+=HyphenRule syllables+=IdRule
		//)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//syllables+=IdRule =>(syllables+=HyphenRule)?
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//syllables+=IdRule
		public Assignment getSyllablesAssignment_0_0_0_0() { return cSyllablesAssignment_0_0_0_0; }
		
		//IdRule
		public RuleCall getSyllablesIdRuleParserRuleCall_0_0_0_0_0() { return cSyllablesIdRuleParserRuleCall_0_0_0_0_0; }
		
		//=>(syllables+=HyphenRule)?
		public Group getGroup_0_0_0_1() { return cGroup_0_0_0_1; }
		
		//syllables+=HyphenRule
		public Assignment getSyllablesAssignment_0_0_0_1_0() { return cSyllablesAssignment_0_0_0_1_0; }
		
		//HyphenRule
		public RuleCall getSyllablesHyphenRuleParserRuleCall_0_0_0_1_0_0() { return cSyllablesHyphenRuleParserRuleCall_0_0_0_1_0_0; }
		
		//syllables+=HyphenRule syllables+=IdRule
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//syllables+=HyphenRule
		public Assignment getSyllablesAssignment_0_0_1_0() { return cSyllablesAssignment_0_0_1_0; }
		
		//HyphenRule
		public RuleCall getSyllablesHyphenRuleParserRuleCall_0_0_1_0_0() { return cSyllablesHyphenRuleParserRuleCall_0_0_1_0_0; }
		
		//syllables+=IdRule
		public Assignment getSyllablesAssignment_0_0_1_1() { return cSyllablesAssignment_0_0_1_1; }
		
		//IdRule
		public RuleCall getSyllablesIdRuleParserRuleCall_0_0_1_1_0() { return cSyllablesIdRuleParserRuleCall_0_0_1_1_0; }
		
		//syllables+=ExtenderRule*
		public Assignment getSyllablesAssignment_0_1() { return cSyllablesAssignment_0_1; }
		
		//ExtenderRule
		public RuleCall getSyllablesExtenderRuleParserRuleCall_0_1_0() { return cSyllablesExtenderRuleParserRuleCall_0_1_0; }
		
		//syllables+=SkipRule
		public Assignment getSyllablesAssignment_1() { return cSyllablesAssignment_1; }
		
		//SkipRule
		public RuleCall getSyllablesSkipRuleParserRuleCall_1_0() { return cSyllablesSkipRuleParserRuleCall_1_0; }
		
		//START_NOTE_GROUP noemphasis?='/'? syllables+=(IdRule|HyphenRule|ExtenderRule)+ END_NOTE_GROUP
		public Group getGroup_2() { return cGroup_2; }
		
		//START_NOTE_GROUP
		public RuleCall getSTART_NOTE_GROUPTerminalRuleCall_2_0() { return cSTART_NOTE_GROUPTerminalRuleCall_2_0; }
		
		//noemphasis?='/'?
		public Assignment getNoemphasisAssignment_2_1() { return cNoemphasisAssignment_2_1; }
		
		//'/'
		public Keyword getNoemphasisSolidusKeyword_2_1_0() { return cNoemphasisSolidusKeyword_2_1_0; }
		
		//syllables+=(IdRule|HyphenRule|ExtenderRule)+
		public Assignment getSyllablesAssignment_2_2() { return cSyllablesAssignment_2_2; }
		
		//(IdRule|HyphenRule|ExtenderRule)
		public Alternatives getSyllablesAlternatives_2_2_0() { return cSyllablesAlternatives_2_2_0; }
		
		//IdRule
		public RuleCall getSyllablesIdRuleParserRuleCall_2_2_0_0() { return cSyllablesIdRuleParserRuleCall_2_2_0_0; }
		
		//HyphenRule
		public RuleCall getSyllablesHyphenRuleParserRuleCall_2_2_0_1() { return cSyllablesHyphenRuleParserRuleCall_2_2_0_1; }
		
		//ExtenderRule
		public RuleCall getSyllablesExtenderRuleParserRuleCall_2_2_0_2() { return cSyllablesExtenderRuleParserRuleCall_2_2_0_2; }
		
		//END_NOTE_GROUP
		public RuleCall getEND_NOTE_GROUPTerminalRuleCall_2_3() { return cEND_NOTE_GROUPTerminalRuleCall_2_3; }
	}
	public class IdRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.IdRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEmphasisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEmphasisAsteriskKeyword_0_0 = (Keyword)cEmphasisAssignment_0.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralIDTerminalRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		
		//IdRule returns Syllable:
		//    emphasis?='*'?
		//    literal=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//emphasis?='*'?
		//literal=ID
		public Group getGroup() { return cGroup; }
		
		//emphasis?='*'?
		public Assignment getEmphasisAssignment_0() { return cEmphasisAssignment_0; }
		
		//'*'
		public Keyword getEmphasisAsteriskKeyword_0_0() { return cEmphasisAsteriskKeyword_0_0; }
		
		//literal=ID
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }
		
		//ID
		public RuleCall getLiteralIDTerminalRuleCall_1_0() { return cLiteralIDTerminalRuleCall_1_0; }
	}
	public class HyphenRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.HyphenRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHyphenRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cLiteralHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cLiteralAssignment_1.eContents().get(0);
		
		//HyphenRule returns Syllable:
		//    {HyphenRule}
		//    literal='--'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{HyphenRule}
		//literal='--'
		public Group getGroup() { return cGroup; }
		
		//{HyphenRule}
		public Action getHyphenRuleAction_0() { return cHyphenRuleAction_0; }
		
		//literal='--'
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }
		
		//'--'
		public Keyword getLiteralHyphenMinusHyphenMinusKeyword_1_0() { return cLiteralHyphenMinusHyphenMinusKeyword_1_0; }
	}
	public class ExtenderRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.ExtenderRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtenderRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cLiteral__Keyword_1_0 = (Keyword)cLiteralAssignment_1.eContents().get(0);
		
		//ExtenderRule returns Syllable:
		//    {ExtenderRule}
		//    literal='__'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExtenderRule}
		//literal='__'
		public Group getGroup() { return cGroup; }
		
		//{ExtenderRule}
		public Action getExtenderRuleAction_0() { return cExtenderRuleAction_0; }
		
		//literal='__'
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }
		
		//'__'
		public Keyword getLiteral__Keyword_1_0() { return cLiteral__Keyword_1_0; }
	}
	public class SkipRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.SkipRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkipRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cLiteral_Keyword_1_0 = (Keyword)cLiteralAssignment_1.eContents().get(0);
		
		//SkipRule returns Syllable:
		//    {SkipRule}
		//    literal='_'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SkipRule}
		//literal='_'
		public Group getGroup() { return cGroup; }
		
		//{SkipRule}
		public Action getSkipRuleAction_0() { return cSkipRuleAction_0; }
		
		//literal='_'
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }
		
		//'_'
		public Keyword getLiteral_Keyword_1_0() { return cLiteral_Keyword_1_0; }
	}
	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPitchAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPitchIDTerminalRuleCall_0_0 = (RuleCall)cPitchAssignment_0.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationDURATIONTerminalRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		///*
		// * Notes and keys
		// */
		////enum Mode:
		////    major='major' | minor='minor'
		////;
		//Note:
		//    pitch=ID duration?=DURATION?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pitch=ID duration?=DURATION?
		public Group getGroup() { return cGroup; }
		
		//pitch=ID
		public Assignment getPitchAssignment_0() { return cPitchAssignment_0; }
		
		//ID
		public RuleCall getPitchIDTerminalRuleCall_0_0() { return cPitchIDTerminalRuleCall_0_0; }
		
		//duration?=DURATION?
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//DURATION
		public RuleCall getDurationDURATIONTerminalRuleCall_1_0() { return cDurationDURATIONTerminalRuleCall_1_0; }
	}
	public class FormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.Format");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cRaggedbottomAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cRaggedbottomRaggedBottomKeyword_2_0_0 = (Keyword)cRaggedbottomAssignment_2_0.eContents().get(0);
		private final Assignment cRaggedlastbottomAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cRaggedlastbottomRaggedLastBottomKeyword_2_1_0 = (Keyword)cRaggedlastbottomAssignment_2_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Format:
		//    'Format'
		//        BEGIN
		//        (raggedbottom?='ragged-bottom'?
		//        & raggedlastbottom?='ragged-last-bottom'?)
		//        END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Format'
		//    BEGIN
		//    (raggedbottom?='ragged-bottom'?
		//    & raggedlastbottom?='ragged-last-bottom'?)
		//    END
		public Group getGroup() { return cGroup; }
		
		//'Format'
		public Keyword getFormatKeyword_0() { return cFormatKeyword_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//(raggedbottom?='ragged-bottom'?
		//& raggedlastbottom?='ragged-last-bottom'?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//raggedbottom?='ragged-bottom'?
		public Assignment getRaggedbottomAssignment_2_0() { return cRaggedbottomAssignment_2_0; }
		
		//'ragged-bottom'
		public Keyword getRaggedbottomRaggedBottomKeyword_2_0_0() { return cRaggedbottomRaggedBottomKeyword_2_0_0; }
		
		//raggedlastbottom?='ragged-last-bottom'?
		public Assignment getRaggedlastbottomAssignment_2_1() { return cRaggedlastbottomAssignment_2_1; }
		
		//'ragged-last-bottom'
		public Keyword getRaggedlastbottomRaggedLastBottomKeyword_2_1_0() { return cRaggedlastbottomRaggedLastBottomKeyword_2_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	
	public class BarlineElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.Barline");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSingleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSingleVerticalLineKeyword_0_0 = (Keyword)cSingleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDoubleVerticalLineVerticalLineKeyword_1_0 = (Keyword)cDoubleEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Barline:
		//    single='|' | double='||'
		//;
		public EnumRule getRule() { return rule; }
		
		//single='|' | double='||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//single='|'
		public EnumLiteralDeclaration getSingleEnumLiteralDeclaration_0() { return cSingleEnumLiteralDeclaration_0; }
		
		//'|'
		public Keyword getSingleVerticalLineKeyword_0_0() { return cSingleVerticalLineKeyword_0_0; }
		
		//double='||'
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_1() { return cDoubleEnumLiteralDeclaration_1; }
		
		//'||'
		public Keyword getDoubleVerticalLineVerticalLineKeyword_1_0() { return cDoubleVerticalLineVerticalLineKeyword_1_0; }
	}
	
	private final ScriptElements pScript;
	private final ToneElements pTone;
	private final VoiceNameElements pVoiceName;
	private final TonePhraseElements pTonePhrase;
	private final VoicePhraseElements pVoicePhrase;
	private final ChantElements pChant;
	private final LyricPhraseElements pLyricPhrase;
	private final BarlineElements eBarline;
	private final NoteGroupElements pNoteGroup;
	private final IdRuleElements pIdRule;
	private final HyphenRuleElements pHyphenRule;
	private final ExtenderRuleElements pExtenderRule;
	private final SkipRuleElements pSkipRule;
	private final NoteElements pNote;
	private final FormatElements pFormat;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tDURATION;
	private final TerminalRule tSTART_NOTE_GROUP;
	private final TerminalRule tEND_NOTE_GROUP;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public LilyChantGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pScript = new ScriptElements();
		this.pTone = new ToneElements();
		this.pVoiceName = new VoiceNameElements();
		this.pTonePhrase = new TonePhraseElements();
		this.pVoicePhrase = new VoicePhraseElements();
		this.pChant = new ChantElements();
		this.pLyricPhrase = new LyricPhraseElements();
		this.eBarline = new BarlineElements();
		this.pNoteGroup = new NoteGroupElements();
		this.pIdRule = new IdRuleElements();
		this.pHyphenRule = new HyphenRuleElements();
		this.pExtenderRule = new ExtenderRuleElements();
		this.pSkipRule = new SkipRuleElements();
		this.pNote = new NoteElements();
		this.pFormat = new FormatElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.STRING");
		this.tDURATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.DURATION");
		this.tSTART_NOTE_GROUP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.START_NOTE_GROUP");
		this.tEND_NOTE_GROUP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.END_NOTE_GROUP");
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.END");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.lilychant.LilyChant.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.lilychant.LilyChant".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Script:
	//    (tones+=Tone)*
	////    ensemble=Ensemble
	//    (chants+=Chant)*
	//    format=Format?
	//;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	///*
	// * Tone definitions
	// */
	//// TODO VOICE NAMES SHOULD BE GLOBAL
	//Tone:
	//    'Tone' name=ID //'key' key=ID
	//        BEGIN
	//        'Voices'
	//            BEGIN
	//            voiceNames+=VoiceName+
	//            END
	//        (phrases+=TonePhrase)+
	//        END
	//;
	public ToneElements getToneAccess() {
		return pTone;
	}
	
	public ParserRule getToneRule() {
		return getToneAccess().getRule();
	}
	
	//VoiceName:
	//    name=ID
	//;
	public VoiceNameElements getVoiceNameAccess() {
		return pVoiceName;
	}
	
	public ParserRule getVoiceNameRule() {
		return getVoiceNameAccess().getRule();
	}
	
	//TonePhrase:
	//    'Phrase' name=ID
	//        BEGIN
	//        voices+=VoicePhrase+
	//        END
	//;
	public TonePhraseElements getTonePhraseAccess() {
		return pTonePhrase;
	}
	
	public ParserRule getTonePhraseRule() {
		return getTonePhraseAccess().getRule();
	}
	
	//VoicePhrase:
	//    'Voice' name=[VoiceName]
	//        BEGIN
	//        notes+=Note+
	//        END
	//;
	public VoicePhraseElements getVoicePhraseAccess() {
		return pVoicePhrase;
	}
	
	public ParserRule getVoicePhraseRule() {
		return getVoicePhraseAccess().getRule();
	}
	
	/////*
	//// * Ensemble
	//// */
	////
	////Ensemble:
	////    'ensemble' ':'
	////    'top' 'staff' ':' BEGIN voices+=[VoiceName]+ END
	////    'bottom' 'staff' ':' BEGIN voices+=[VoiceName]+ END
	////;
	///*
	// * Chants
	// */
	//Chant:
	//    'Chant' name=STRING? 'Tone' tone=[Tone] //'key' key=ID
	//        BEGIN
	//        phrases+=LyricPhrase+
	//        END
	//;
	public ChantElements getChantAccess() {
		return pChant;
	}
	
	public ParserRule getChantRule() {
		return getChantAccess().getRule();
	}
	
	//LyricPhrase:
	//    ('(' explicitPhrase=[TonePhrase] ')')?
	//    noteGroups+=NoteGroup+
	//    bar=Barline
	//;
	public LyricPhraseElements getLyricPhraseAccess() {
		return pLyricPhrase;
	}
	
	public ParserRule getLyricPhraseRule() {
		return getLyricPhraseAccess().getRule();
	}
	
	//enum Barline:
	//    single='|' | double='||'
	//;
	public BarlineElements getBarlineAccess() {
		return eBarline;
	}
	
	public EnumRule getBarlineRule() {
		return getBarlineAccess().getRule();
	}
	
	//NoteGroup:
	//    // single syllable
	//    (
	//        (
	//            syllables+=IdRule =>(syllables+=HyphenRule)?
	//            | syllables+=HyphenRule syllables+=IdRule
	//        )
	//        syllables+=ExtenderRule*
	//    )
	//    | syllables+=SkipRule
	//    // group of syllables to be repeated on the same pitch
	//    | START_NOTE_GROUP noemphasis?='/'? syllables+=(IdRule|HyphenRule|ExtenderRule)+ END_NOTE_GROUP
	//;
	public NoteGroupElements getNoteGroupAccess() {
		return pNoteGroup;
	}
	
	public ParserRule getNoteGroupRule() {
		return getNoteGroupAccess().getRule();
	}
	
	//IdRule returns Syllable:
	//    emphasis?='*'?
	//    literal=ID
	//;
	public IdRuleElements getIdRuleAccess() {
		return pIdRule;
	}
	
	public ParserRule getIdRuleRule() {
		return getIdRuleAccess().getRule();
	}
	
	//HyphenRule returns Syllable:
	//    {HyphenRule}
	//    literal='--'
	//;
	public HyphenRuleElements getHyphenRuleAccess() {
		return pHyphenRule;
	}
	
	public ParserRule getHyphenRuleRule() {
		return getHyphenRuleAccess().getRule();
	}
	
	//ExtenderRule returns Syllable:
	//    {ExtenderRule}
	//    literal='__'
	//;
	public ExtenderRuleElements getExtenderRuleAccess() {
		return pExtenderRule;
	}
	
	public ParserRule getExtenderRuleRule() {
		return getExtenderRuleAccess().getRule();
	}
	
	//SkipRule returns Syllable:
	//    {SkipRule}
	//    literal='_'
	//;
	public SkipRuleElements getSkipRuleAccess() {
		return pSkipRule;
	}
	
	public ParserRule getSkipRuleRule() {
		return getSkipRuleAccess().getRule();
	}
	
	///*
	// * Notes and keys
	// */
	////enum Mode:
	////    major='major' | minor='minor'
	////;
	//Note:
	//    pitch=ID duration?=DURATION?
	//;
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}
	
	//Format:
	//    'Format'
	//        BEGIN
	//        (raggedbottom?='ragged-bottom'?
	//        & raggedlastbottom?='ragged-last-bottom'?)
	//        END
	//;
	public FormatElements getFormatAccess() {
		return pFormat;
	}
	
	public ParserRule getFormatRule() {
		return getFormatAccess().getRule();
	}
	
	///*
	// * Terminals
	// */
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'\u0400'..'\u04ff'|','|'\''|';'|':'|'.')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING    :
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal DURATION: ('1'|'2'|'4'|'8'|'16'|'\breve')+;
	public TerminalRule getDURATIONRule() {
		return tDURATION;
	}
	
	////terminal HYPHEN: '--';
	////terminal EXTENDER: '__';
	////terminal SKIP: '_';
	//terminal START_NOTE_GROUP: '<';
	public TerminalRule getSTART_NOTE_GROUPRule() {
		return tSTART_NOTE_GROUP;
	}
	
	//terminal END_NOTE_GROUP: '>';
	public TerminalRule getEND_NOTE_GROUPRule() {
		return tEND_NOTE_GROUP;
	}
	
	//// white-space aware
	//// See https://eclipse.org/Xtext/documentation/307_special_languages.html,
	//// and LilyChantTokenSource.java
	//terminal BEGIN: 'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END: 'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
