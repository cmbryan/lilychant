/*
 * generated by Xtext 2.40.0
 */
package org.lilychant.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.lilychant.lilyChantScript.Chant;
import org.lilychant.lilyChantScript.ExtenderRule;
import org.lilychant.lilyChantScript.Format;
import org.lilychant.lilyChantScript.HyphenRule;
import org.lilychant.lilyChantScript.LilyChantScriptPackage;
import org.lilychant.lilyChantScript.LyricPhrase;
import org.lilychant.lilyChantScript.Note;
import org.lilychant.lilyChantScript.NoteGroup;
import org.lilychant.lilyChantScript.Script;
import org.lilychant.lilyChantScript.SkipRule;
import org.lilychant.lilyChantScript.Syllable;
import org.lilychant.lilyChantScript.Tone;
import org.lilychant.lilyChantScript.TonePhrase;
import org.lilychant.lilyChantScript.VoiceName;
import org.lilychant.lilyChantScript.VoicePhrase;
import org.lilychant.services.LilyChantGrammarAccess;

@SuppressWarnings("all")
public class LilyChantSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LilyChantGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LilyChantScriptPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LilyChantScriptPackage.CHANT:
				sequence_Chant(context, (Chant) semanticObject); 
				return; 
			case LilyChantScriptPackage.EXTENDER_RULE:
				sequence_ExtenderRule(context, (ExtenderRule) semanticObject); 
				return; 
			case LilyChantScriptPackage.FORMAT:
				sequence_Format(context, (Format) semanticObject); 
				return; 
			case LilyChantScriptPackage.HYPHEN_RULE:
				sequence_HyphenRule(context, (HyphenRule) semanticObject); 
				return; 
			case LilyChantScriptPackage.LYRIC_PHRASE:
				sequence_LyricPhrase(context, (LyricPhrase) semanticObject); 
				return; 
			case LilyChantScriptPackage.NOTE:
				sequence_Note(context, (Note) semanticObject); 
				return; 
			case LilyChantScriptPackage.NOTE_GROUP:
				sequence_NoteGroup(context, (NoteGroup) semanticObject); 
				return; 
			case LilyChantScriptPackage.SCRIPT:
				sequence_Script(context, (Script) semanticObject); 
				return; 
			case LilyChantScriptPackage.SKIP_RULE:
				sequence_SkipRule(context, (SkipRule) semanticObject); 
				return; 
			case LilyChantScriptPackage.SYLLABLE:
				sequence_IdRule(context, (Syllable) semanticObject); 
				return; 
			case LilyChantScriptPackage.TONE:
				sequence_Tone(context, (Tone) semanticObject); 
				return; 
			case LilyChantScriptPackage.TONE_PHRASE:
				sequence_TonePhrase(context, (TonePhrase) semanticObject); 
				return; 
			case LilyChantScriptPackage.VOICE_NAME:
				sequence_VoiceName(context, (VoiceName) semanticObject); 
				return; 
			case LilyChantScriptPackage.VOICE_PHRASE:
				sequence_VoicePhrase(context, (VoicePhrase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Chant returns Chant
	 *
	 * Constraint:
	 *     (name=STRING? tone=[Tone|ID] phrases+=LyricPhrase+)
	 * </pre>
	 */
	protected void sequence_Chant(ISerializationContext context, Chant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExtenderRule returns ExtenderRule
	 *
	 * Constraint:
	 *     literal='__'
	 * </pre>
	 */
	protected void sequence_ExtenderRule(ISerializationContext context, ExtenderRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LilyChantScriptPackage.Literals.SYLLABLE__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LilyChantScriptPackage.Literals.SYLLABLE__LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExtenderRuleAccess().getLiteral__Keyword_1_0(), semanticObject.getLiteral());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Format returns Format
	 *
	 * Constraint:
	 *     (raggedbottom?='ragged-bottom' | raggedlastbottom?='ragged-last-bottom')+
	 * </pre>
	 */
	protected void sequence_Format(ISerializationContext context, Format semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HyphenRule returns HyphenRule
	 *
	 * Constraint:
	 *     literal='--'
	 * </pre>
	 */
	protected void sequence_HyphenRule(ISerializationContext context, HyphenRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LilyChantScriptPackage.Literals.SYLLABLE__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LilyChantScriptPackage.Literals.SYLLABLE__LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyphenRuleAccess().getLiteralHyphenMinusHyphenMinusKeyword_1_0(), semanticObject.getLiteral());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IdRule returns Syllable
	 *
	 * Constraint:
	 *     (emphasis?='*'? literal=ID)
	 * </pre>
	 */
	protected void sequence_IdRule(ISerializationContext context, Syllable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LyricPhrase returns LyricPhrase
	 *
	 * Constraint:
	 *     (explicitPhrase=[TonePhrase|ID]? noteGroups+=NoteGroup+ bar=Barline)
	 * </pre>
	 */
	protected void sequence_LyricPhrase(ISerializationContext context, LyricPhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NoteGroup returns NoteGroup
	 *
	 * Constraint:
	 *     (
	 *         (((syllables+=IdRule syllables+=HyphenRule?) | (syllables+=HyphenRule syllables+=IdRule)) syllables+=ExtenderRule*) | 
	 *         syllables+=SkipRule | 
	 *         (noemphasis?='/'? (syllables+=IdRule | syllables+=HyphenRule | syllables+=ExtenderRule)+)
	 *     )
	 * </pre>
	 */
	protected void sequence_NoteGroup(ISerializationContext context, NoteGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Note returns Note
	 *
	 * Constraint:
	 *     (pitch=ID duration=DURATION?)
	 * </pre>
	 */
	protected void sequence_Note(ISerializationContext context, Note semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Script returns Script
	 *
	 * Constraint:
	 *     ((tones+=Tone* chants+=Chant+ format=Format) | (tones+=Tone* format=Format) | format=Format)?
	 * </pre>
	 */
	protected void sequence_Script(ISerializationContext context, Script semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SkipRule returns SkipRule
	 *
	 * Constraint:
	 *     literal='_'
	 * </pre>
	 */
	protected void sequence_SkipRule(ISerializationContext context, SkipRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LilyChantScriptPackage.Literals.SYLLABLE__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LilyChantScriptPackage.Literals.SYLLABLE__LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSkipRuleAccess().getLiteral_Keyword_1_0(), semanticObject.getLiteral());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TonePhrase returns TonePhrase
	 *
	 * Constraint:
	 *     (name=ID voices+=VoicePhrase+)
	 * </pre>
	 */
	protected void sequence_TonePhrase(ISerializationContext context, TonePhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tone returns Tone
	 *
	 * Constraint:
	 *     (name=ID voiceNames+=VoiceName+ phrases+=TonePhrase+)
	 * </pre>
	 */
	protected void sequence_Tone(ISerializationContext context, Tone semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VoiceName returns VoiceName
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_VoiceName(ISerializationContext context, VoiceName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LilyChantScriptPackage.Literals.VOICE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LilyChantScriptPackage.Literals.VOICE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVoiceNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VoicePhrase returns VoicePhrase
	 *
	 * Constraint:
	 *     (name=[VoiceName|ID] notes+=Note+)
	 * </pre>
	 */
	protected void sequence_VoicePhrase(ISerializationContext context, VoicePhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
